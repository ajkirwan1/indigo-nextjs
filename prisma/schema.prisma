// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id         String     @id
    sessions   Session[]
    passwords  Password[]
    investmentinterests  Investmentinterest[]
    properties  UsersOnProperties[]
    propertiesv2 UsersOnProperties2[]
    username String
    firstname String
    lastname String
    email String
    companyname String?
    phonenumber String?
    buyertype String?
    location String?
    purchasetimeline String?
    estinvestmentinterest String?
    previousinvestment String?
    adminaccess Int
    consultingaccess Int
    propertyaccess Int
    accessrequestdate DateTime
    createdAt DateTime @default(now())


@@index([createdAt])
  @@map("users")
}

model Password {
    id             Int    @id @default(autoincrement())
    hashedPassword String
    userId         String?
    user           User?   @relation(references: [id], fields: [userId], onDelete: Cascade)
    
    @@map("passwords")
}

model Investmentinterest {
    id             Int    @id @default(autoincrement())
    interesttype   String?
    userId         String?
    user           User?   @relation(references: [id], fields: [userId], onDelete: Cascade)
    
    @@map("investmentinterests")
}

model Session {
  id        String @id @unique
  userId    String
  expiresAt DateTime         
  user      User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@map("sessions")
  @@index([createdAt])
  @@index([userId])
}

model Property {
  id Int    @id @default(autoincrement())
  users UsersOnProperties[]
  title String
  name String
  image String
  pdfid String

  createdAt DateTime @default(now())
  
  @@index([createdAt])
  @@map("properties")
}

model Property2 {
  id Int    @id @default(autoincrement())
  users UsersOnProperties2[]
  title String
  location String
  price String
  description String
  pdfUrl String @db.Text
  imageUrl String @db.Text

  createdAt DateTime @default(now())
  
  @@index([createdAt])
  @@map("properties2")
}

model UsersOnProperties2 {
  id Int    @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  property Property2 @relation(fields: [propertyId], references: [id])
  propertyId Int

  @@map("usersonproperties2")
}


model UsersOnProperties {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  property Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  
  @@map("usersonproperties")
}

model Pdf {
  id String @id @default(cuid())
  url String
}

model UserRegistration {
  id Int @id @default(autoincrement())
  name String
  email String
  phoneNumber String
  buyertype String
  location String
  purchaseTimeline String
  investmentInterest String
  investmentRange String
  previousInvestment String
  registration String @default("pending")
  createdAt DateTime @default(now())

  @@map("userRegistration")
}

